df3<-data.frame(x=c('SIFT','SIFT+HOG','SIFT+HOG+LBP','SIFT+HOG+LBP+Gray256'),
y=c(0.79,0.8344444,0.832222222,0.838888889),group=1)
ggplot(df1,aes(x,y,group=group))+geom_line(aes(color="GBM"))+
geom_line(data=df2,aes(color="xgboost"))+
geom_line(data=df3,aes(color="Random Forest"))+
labs(color="Model")+
xlab('Feature')+
ylab('Accuracy')+
ggtitle('Differnet Model with different feature')
ggplot(df1,aes(x,y,group=group))+geom_line(aes(color="GBM"))+
geom_line(data=df2,aes(color="xgboost"))+
geom_line(data=df3,aes(color="Random Forest"))+
labs(color="Model")+
xlab('Feature')+
ylab('Accuracy')+
ggtitle('Differnet Model with different feature')+
theme(axis.text.x=element_text(angle=45, hjust=1))+
train_index <- sort(sample(1:length(label_train),0.7*length(label_train)))
ggplot(df1,aes(x,y,group=group))+geom_line(aes(color="GBM"))+
geom_line(data=df2,aes(color="xgboost"))+
geom_line(data=df3,aes(color="Random Forest"))+
labs(color="Model")+
xlab('Feature')+
ylab('Accuracy')+
ggtitle('Differnet Model with different feature')+
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(df1,aes(x,y,group=group))+geom_line(aes(color="GBM"))+
geom_line(data=df2,aes(color="xgboost"))+
geom_line(data=df3,aes(color="Random Forest"))+
labs(color="Model")+
xlab('Feature')+
ylab('Accuracy')+
ggtitle('Differnet Model with different feature')+
theme(axis.text.x=element_text(angle=135, hjust=1))
ggplot(df1,aes(x,y,group=group))+geom_line(aes(color="GBM"))+
geom_line(data=df2,aes(color="xgboost"))+
geom_line(data=df3,aes(color="Random Forest"))+
labs(color="Model")+
xlab('Feature')+
ylab('Accuracy')+
ggtitle('Differnet Model with different feature')+
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(df1,aes(x,y,group=group))+geom_line(aes(color="GBM"))+
geom_line(data=df2,aes(color="xgboost"))+
geom_line(data=df3,aes(color="Random Forest"))+
labs(color="Model")+
xlab('Feature')+
ylab('Accuracy')+
ggtitle('Differnet Model with different feature')+
theme(axis.text.x=element_text(angle=45, hjust=1))
df1<-data.frame(x=c(150,250,300,500),y=rep(1,4)-c(0.271,0.255,0.25,0.228))
df2<-data.frame(x=c(150,250,300,500),y=rep(1,4)-c(0.203,0.199,0.206,0.191))
library(ggplot2)
ggplot(df1,aes(x,y))+geom_line(aes(color="0.01"))+
geom_line(data=df2,aes(color="0.1"))+
geom_point(c(0.1,250))
labs(color="shrinkage")+
xlab('Number of trees')+
ylab('Accuracy')+
ggtitle('GBM cross validation')
?geom_point
source('../lib/train.R')
source('../lib/cross_validation.R')
tm_train_xgb <- system.time(xgb_fit <- xgb_train(feature_train,label_train,run.cv=run.cv))[3]
feature_train <- get(load('../output/sift5000_lbp_hog_gray.RData'))
tm_train_xgb <- system.time(xgb_fit <- xgb_train(feature_train,label_train,run.cv=run.cv))[3]
run.cv=FALSE # run cross-validation on the training set
K_folds <- 3  # number of CV folds
run.feature.train=FALSE # process features for all pictures
run.train = FALSE # if true, train model on training data, else use saved model
run.test=TRUE # run evaluation on an independent test set
run.feature.test=FALSE # process features for test set
tm_train_xgb <- system.time(xgb_fit <- xgb_train(feature_train,label_train,run.cv=run.cv))[3]
save(xgb_fit,file='../output/xgb_fit.RData')
tm_train_xgb
list.of.packages <- c("e1071", "ggplot2","gbm","caret","randomForest","EBImage","xgboost","OpenImageR")
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# if(length(new.packages))
#   {
#    install.packages(new.packages)
#    source("https://bioconductor.org/biocLite.R")
#    biocLite("EBImage")
#   }
packages.needed=setdiff(list.of.packages,
intersect(installed.packages()[,1],
list.of.packages))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("gbm")
library("ggplot2")
library("caret")
library("randomForest")
library("EBImage")
library("xgboost")
library("OpenImageR")
label_train.dir <- '../data/label_train.csv'
feature_sift_train.dir <- '../data/sift_train.csv'
image_test.dir <- '../../data/images'
feature_sift_test.dir <- '../../data/sift_test.csv'
feature_hog_test.dir <- '../output/feature_hog_test.RData'
feature_lbp_test.dir <- '../output/feature_lbp_test.csv'
feature_gray_test.dir <- '../output/feature_gray_test.RData'
feature_test.dir <- '../output/feature_test.RData'
run.cv=FALSE # run cross-validation on the training set
K_folds <- 3  # number of CV folds
run.feature.train=FALSE # process features for all pictures
run.train = FALSE # if true, train model on training data, else use saved model
run.test=TRUE # run evaluation on an independent test set
run.feature.test=FALSE # process features for test set
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
sift_train_feature <- read.csv(feature_sift_train.dir,as.is=T)[,-1]
source("../lib/feature.R")
feature_train <- get(load('../output/sift5000_lbp_hog_gray.RData'))
sift_test_feature <- read.csv(feature_sift_test.dir,as.is=T)[,-1]
tm_feature_hog <- system.time(feature_hog_test <-  HOG_extract(image_test.dir))
tm_feature_gray <- system.time(feature_gray_test <-  gray_extractFeature(image_test.dir))
source("../lib/feature.R")
gray_extractFeature(image_test.dir)
list.of.packages <- c("e1071", "ggplot2","gbm","caret","randomForest","EBImage","xgboost","OpenImageR","stringr")
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# if(length(new.packages))
#   {
#    install.packages(new.packages)
#    source("https://bioconductor.org/biocLite.R")
#    biocLite("EBImage")
#   }
packages.needed=setdiff(list.of.packages,
intersect(installed.packages()[,1],
list.of.packages))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("stringr")
library("gbm")
library("ggplot2")
library("caret")
library("randomForest")
library("EBImage")
library("xgboost")
library("OpenImageR")
tm_feature_gray <- system.time(feature_gray_test <-  gray_extractFeature(image_test.dir))
tm_feature_test <- tm_feature_gray + tm_feature_hog
save(feature_hog_test,file = feature_hog_test.dir)
save(feature_gray_test,file = feature_gray_test.dir)
load(feature_hog_test.dir)
load(feature_gray_test.dir)
feature_lbp_test <- read.csv(feature_lbp_test.dir,as.is=T)
feature_lbp_test <- read.csv(feature_lbp_test.dir,as.is=T)
feature_test <- cbind(sift_test_feature,feature_hog_test,feature_lbp_test,feature_gray_test)
View(feature_lbp_test)
View(feature_lbp_test)
feature_lbp_test <- read.csv(feature_lbp_test.dir,as.is=T)
dim(feature_lbp_test)
View(feature_lbp_test)
feature_lbp_test <- read.csv(feature_lbp_test.dir,as.is=T)[1:100,]
feature_test <- cbind(sift_test_feature,feature_hog_test,feature_lbp_test,feature_gray_test)
save(feature_test,file = feature_test.dir)
feature_test <- get(load(feature_test.dir)) # feature_test
source('../lib/train.R')
source('../lib/cross_validation.R')
if(run.train){
tm_train_base <- system.time(base_fit <-  gbm_train(sift_train_feature,label_train,run.cv = run.cv))[3]
save(base_fit,file='../output/base_fit.RData')
}else{
load('../output/base_fit.RData')
tm_train_base <- 152.279
}
if(run.train){
tm_train_xgb <- system.time(xgb_fit <- xgb_train(feature_train,label_train,run.cv=run.cv))[3]
save(xgb_fit,file='../output/xgb_fit.RData')
}else{
load('../output/xgb_fit.RData')
tm_train_xgb <- 193.722
}
sift_test_feature <- read.csv(feature_sift_test.dir,as.is = T)[,-1]
tm_predict_base <- system.time(pred_label_base <- gbm_test(base_fit,sift_test_feature))[3]
source('../lib/test.R')
tm_predict_base <- system.time(pred_label_base <- gbm_test(base_fit,sift_test_feature))[3]
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
pred_label <- cbind(pred_label_base,pred_label_xgb)
write.csv(pred_label,'../output/labels.csv')
cat("Time for training model=", tm_train_base, "s \n")
cat("Time for making prediction=", tm_train_xgb, "s \n")
setwd("~/GitHub/Fall2017-project3-fall2017-project3-grp3/doc")
image_test.dir <- '../../../Desktop/Project 3/training_set/images/'
tm_feature_hog <- system.time(feature_hog_test <-  HOG_extract(image_test.dir))
tm_feature_hog
tm_feature_gray <- system.time(feature_gray_test <-  gray_extractFeature(image_test.dir))[3]
tm_feature_gray
list.of.packages <- c("e1071", "ggplot2","gbm","caret","randomForest","EBImage","xgboost","OpenImageR","stringr")
packages.needed=setdiff(list.of.packages,
intersect(installed.packages()[,1],
list.of.packages))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("stringr")
library("gbm")
library("ggplot2")
library("caret")
library("randomForest")
library("EBImage")
library("xgboost")
library("OpenImageR")
#setwd('.')
#image_train.dir  # raw image folder
label_train.dir <- '../data/label_train.csv'
feature_sift_train.dir <- '../data/sift_train.csv'
# feature_hog_train.dir
# feature_lbp_train.dir
#
#
image_test.dir <- '../../data/images'
#
feature_sift_test.dir <- '../../data/sift_test.csv'
feature_hog_test.dir <- '../output/feature_hog_test.RData'
#feature_sift_pca_test.dir <- '../output/feature_sift_pca_test.RData'
feature_lbp_test.dir <- '../output/feature_lbp_test.RData'
feature_gray_test.dir <- '../output/feature_gray_test.RData'
feature_test.dir <- '../output/feature_test.RData'
#
# predict_label_base.dir
# predict_label_adv1.dir
# predict_label_adv2.dir
version
source('../lib/test.R')
load('../output/base_fit.RData')
setwd("~/GitHub/Fall2017-project3-fall2017-project3-grp3/doc")
load('../output/base_fit.RData')
load('../output/base_fit.RData')
load('../output/xgb_fit.RData')
tm_feature_hog <- system.time(feature_hog_test <-  HOG_extract(image_test.dir))[3]
source("../lib/feature.R")
tm_feature_hog <- system.time(feature_hog_test <-  HOG_extract(image_test.dir))[3]
tm_feature_gray <- system.time(feature_gray_test <-  gray_extractFeature(image_test.dir))[3]
save(feature_hog_test,file = feature_hog_test.dir)
save(feature_gray_test,file = feature_gray_test.dir)
feature_lbp_test <- get(load(feature_lbp_test.dir))
feature_test <- cbind(sift_test_feature,feature_hog_test,feature_lbp_test,feature_gray_test)
sift_test_feature <- read.csv(feature_sift_test.dir,as.is=T)[,-1]
feature_test <- cbind(sift_test_feature,feature_hog_test,feature_lbp_test,feature_gray_test)
save(feature_test,file = feature_test.dir)
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
write.csv(pred_label_xgb,'../output/xgb_label.csv')
pred_label_xgb
source('../lib/train.R')
source('../lib/cross_validation.R')
tm_train_base <- system.time(base_fit <-  gbm_train(sift_train_feature,label_train,run.cv = run.cv))[3]
sift_train_feature <- read.csv(feature_sift_train.dir,as.is=T)[,-1]
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
setwd("~/GitHub/Fall2017-project3-fall2017-project3-grp3/doc")
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
list.of.packages <- c("e1071", "ggplot2","gbm","caret","randomForest","EBImage","xgboost","OpenImageR","stringr")
packages.needed=setdiff(list.of.packages,
intersect(installed.packages()[,1],
list.of.packages))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("stringr")
library("gbm")
library("ggplot2")
library("caret")
library("randomForest")
library("EBImage")
library("xgboost")
library("OpenImageR")
#setwd('.')
#image_train.dir  # raw image folder
label_train.dir <- '../data/label_train.csv'
feature_sift_train.dir <- '../data/sift_train.csv'
# feature_hog_train.dir
# feature_lbp_train.dir
#
#
image_test.dir <- '../../data/images'
#
feature_sift_test.dir <- '../../data/sift_test.csv'
feature_hog_test.dir <- '../output/feature_hog_test.RData'
#feature_sift_pca_test.dir <- '../output/feature_sift_pca_test.RData'
feature_lbp_test.dir <- '../output/feature_lbp_test.RData'
feature_gray_test.dir <- '../output/feature_gray_test.RData'
feature_test.dir <- '../output/feature_test.RData'
#
# predict_label_base.dir
# predict_label_adv1.dir
# predict_label_adv2.dir
run.cv=FALSE # run cross-validation on the training set
K_folds <- 3  # number of CV folds
run.feature.train=FALSE # process features for all pictures
run.train = FALSE # if true, train model on training data, else use saved model
run.test=FALSE # run evaluation on an independent test set
run.feature.test=FALSE # process features for test set
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
sift_train_feature <- read.csv(feature_sift_train.dir,as.is=T)[,-1]
source("../lib/feature.R")
feature_train <- get(load('../output/sift5000_lbp_hog_gray.RData'))
feature_test <- get(load(feature_test.dir)) # feature_test
source('../lib/train.R')
source('../lib/cross_validation.R')
tm_train_xgb <- system.time(xgb_fit <- xgb_train(feature_train,label_train,run.cv=run.cv))[3]
save(xgb_fit,file='../output/xgb_fit.RData')
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
source('../lib/test.R')
.
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
pred_label_xgb
load('../output/train_index.RData')
xgb_fit <- xgb_train(feature_train[train_index,],label_train[train_index],run.cv=run.cv)
xgb_test(xgb_fit,feature_train[-train_index,])
pred_label_xgb <- xgb_test(xgb_fit,feature_train[-train_index,])
mean(pred_label_xgb==label_train[-train_index])
list.of.packages <- c("e1071", "ggplot2","gbm","caret","randomForest","EBImage","xgboost","OpenImageR","stringr")
packages.needed=setdiff(list.of.packages,
intersect(installed.packages()[,1],
list.of.packages))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("stringr")
library("gbm")
library("ggplot2")
library("caret")
library("randomForest")
library("EBImage")
library("xgboost")
library("OpenImageR")
#setwd('.')
#image_train.dir  # raw image folder
label_train.dir <- '../data/label_train.csv'
feature_sift_train.dir <- '../data/sift_train.csv'
# feature_hog_train.dir
# feature_lbp_train.dir
#
#
image_test.dir <- '../../data/images'
#
feature_sift_test.dir <- '../../data/sift_test.csv'
feature_hog_test.dir <- '../output/feature_hog_test.RData'
#feature_sift_pca_test.dir <- '../output/feature_sift_pca_test.RData'
feature_lbp_test.dir <- '../output/feature_lbp_test.RData'
feature_gray_test.dir <- '../output/feature_gray_test.RData'
feature_test.dir <- '../output/feature_test.RData'
#
# predict_label_base.dir
# predict_label_adv1.dir
# predict_label_adv2.dir
run.cv=FALSE # run cross-validation on the training set
K_folds <- 3  # number of CV folds
run.feature.train=FALSE # process features for all pictures
run.train = FALSE # if true, train model on training data, else use saved model
run.test=FALSE # run evaluation on an independent test set
run.feature.test=FALSE # process features for test set
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
sift_train_feature <- read.csv(feature_sift_train.dir,as.is=T)[,-1]
source("../lib/feature.R")
#extract_feature
#if(run.feature.train){
#tm_extract_HOG <- system.time(HOG_features <- HOG_extract(image_train.dir))
#print(tm_extract_HOG)
#tm_feature_train <-
#  system.time(feature_train <- extract_feature(sift_train_feature,image_train.dir))[3]
#save(feature_train,file=feature_output.dir)
#}else{
feature_train <- get(load('../output/sift5000_lbp_hog_gray.RData'))
#}
if(run.feature.test){
sift_test_feature <- read.csv(feature_sift_test.dir,as.is=T)[,-1]
#tm_feature_pca <- system.time(feature_sift_pca_test <- feature.pca(sift_test_feature))
tm_feature_hog <- system.time(feature_hog_test <-  HOG_extract(image_test.dir))[3]
tm_feature_gray <- system.time(feature_gray_test <-  gray_extractFeature(image_test.dir))[3]
tm_feature_test <- tm_feature_gray + tm_feature_hog
#save(feature_sift_pca_test,file = feature_sift_pca_test.dir)
save(feature_hog_test,file = feature_hog_test.dir)
save(feature_gray_test,file = feature_gray_test.dir)
#load(feature_sift_pca_test.dir)
load(feature_hog_test.dir)
load(feature_gray_test.dir)
#feature_lbp_test <- read.csv(feature_lbp_test.dir,as.is=T)[1:100,]
feature_lbp_test <- get(load(feature_lbp_test.dir))
#feature_gray_test <- read.csv(feature_gray_test.dir,as.is=T)
#feature_lbp_test <- get(load(feature_lbp_test.dir))
feature_test <- cbind(sift_test_feature,feature_lbp_test,feature_hog_test,feature_gray_test)
save(feature_test,file = feature_test.dir)
}else{
feature_test <- get(load(feature_test.dir)) # feature_test
}
# if(run.evaluation){
#   load('../output/train_index.RData')
#   #train_index <- sort(sample(1:length(label_train),0.7*length(label_train)))
#   sift_train_feature <- sift_train_feature[train_index,]
#   feature_train <- feature_train[train_index,]
#   feature_test <- feature_train[-train_index,]
#   label_train <- label_train[train_index]
#   label_test <- label_train[-train_index]
# }
load(feature_hog_test.dir)
load(feature_gray_test.dir)
feature_lbp_test <- get(load(feature_lbp_test.dir))
feature_test <- cbind(sift_test_feature,feature_lbp_test,feature_hog_test,feature_gray_test)
sift_test_feature <- read.csv(feature_sift_test.dir,as.is=T)[,-1]
save(feature_test,file = feature_test.dir)
feature_test <- cbind(sift_test_feature,feature_lbp_test,feature_hog_test,feature_gray_test)
save(feature_test,file = feature_test.dir)
load('../output/xgb_fit.RData')
tm_predict_base <- system.time(pred_label_base <- gbm_test(base_fit,sift_test_feature))[3]
source('../lib/test.R')
tm_predict_base <- system.time(pred_label_base <- gbm_test(base_fit,sift_test_feature))[3]
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
pred_label_xgb
feature_test <- cbind(sift_test_feature,feature_lbp_test,feature_hog_test,feature_gray_test)
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
pred_label_xgb
list.of.packages <- c("e1071", "ggplot2","gbm","caret","randomForest","EBImage","xgboost","OpenImageR","stringr")
packages.needed=setdiff(list.of.packages,
intersect(installed.packages()[,1],
list.of.packages))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("stringr")
library("gbm")
library("ggplot2")
library("caret")
library("randomForest")
library("EBImage")
library("xgboost")
library("OpenImageR")
#setwd('.')
#image_train.dir  # raw image folder
label_train.dir <- '../data/label_train.csv'
feature_sift_train.dir <- '../data/sift_train.csv'
# feature_hog_train.dir
# feature_lbp_train.dir
#
#
image_test.dir <- '../../data/images'
#
feature_sift_test.dir <- '../../data/sift_test.csv'
feature_hog_test.dir <- '../output/feature_hog_test.RData'
#feature_sift_pca_test.dir <- '../output/feature_sift_pca_test.RData'
feature_lbp_test.dir <- '../output/feature_lbp_test.RData'
feature_gray_test.dir <- '../output/feature_gray_test.RData'
feature_test.dir <- '../output/feature_test.RData'
#
# predict_label_base.dir
# predict_label_adv1.dir
# predict_label_adv2.dir
run.cv=FALSE # run cross-validation on the training set
K_folds <- 3  # number of CV folds
run.feature.train=FALSE # process features for all pictures
run.train = FALSE # if true, train model on training data, else use saved model
run.test=FALSE # run evaluation on an independent test set
run.feature.test=FALSE # process features for test set
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
sift_train_feature <- read.csv(feature_sift_train.dir,as.is=T)[,-1]
source("../lib/feature.R")
#extract_feature
#if(run.feature.train){
#tm_extract_HOG <- system.time(HOG_features <- HOG_extract(image_train.dir))
#print(tm_extract_HOG)
#tm_feature_train <-
#  system.time(feature_train <- extract_feature(sift_train_feature,image_train.dir))[3]
#save(feature_train,file=feature_output.dir)
#}else{
feature_train <- get(load('../output/sift5000_lbp_hog_gray.RData'))
#}
if(run.feature.test){
sift_test_feature <- read.csv(feature_sift_test.dir,as.is=T)[,-1]
#tm_feature_pca <- system.time(feature_sift_pca_test <- feature.pca(sift_test_feature))
tm_feature_hog <- system.time(feature_hog_test <-  HOG_extract(image_test.dir))[3]
tm_feature_gray <- system.time(feature_gray_test <-  gray_extractFeature(image_test.dir))[3]
tm_feature_test <- tm_feature_gray + tm_feature_hog
#save(feature_sift_pca_test,file = feature_sift_pca_test.dir)
save(feature_hog_test,file = feature_hog_test.dir)
save(feature_gray_test,file = feature_gray_test.dir)
#load(feature_sift_pca_test.dir)
load(feature_hog_test.dir)
load(feature_gray_test.dir)
#feature_lbp_test <- read.csv(feature_lbp_test.dir,as.is=T)[1:100,]
feature_lbp_test <- get(load(feature_lbp_test.dir))
#feature_gray_test <- read.csv(feature_gray_test.dir,as.is=T)
#feature_lbp_test <- get(load(feature_lbp_test.dir))
feature_test <- cbind(sift_test_feature,feature_lbp_test,feature_hog_test,feature_gray_test)
save(feature_test,file = feature_test.dir)
}else{
feature_test <- get(load(feature_test.dir)) # feature_test
}
# if(run.evaluation){
#   load('../output/train_index.RData')
#   #train_index <- sort(sample(1:length(label_train),0.7*length(label_train)))
#   sift_train_feature <- sift_train_feature[train_index,]
#   feature_train <- feature_train[train_index,]
#   feature_test <- feature_train[-train_index,]
#   label_train <- label_train[train_index]
#   label_test <- label_train[-train_index]
# }
source('../lib/test.R')
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
load('../output/xgb_fit.RData')
tm_predict_xgb <- system.time(pred_label_xgb <- xgb_test(xgb_fit,feature_test))[3]
pred_label_xgb
feature_train <- get(load('../output/feature_train.RData'))
tm_train_xgb <- system.time(xgb_fit <- xgb_train(feature_train,label_train,run.cv=run.cv))[3]
source('../lib/train.R')
tm_train_xgb <- system.time(xgb_fit <- xgb_train(feature_train,label_train,run.cv=run.cv))[3]
pred_label_xgb <- xgb_test(xgb_fit,feature_test)
pred_label_xgb
save(xgb_fit,file='../output/xgb_fit.RData')
label_train <- as.vector(read.csv(label_train.dir,as.is = T)[,2])
